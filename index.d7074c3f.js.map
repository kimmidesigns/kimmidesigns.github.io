{"mappings":"AAAAA,EAAEC,UAAUC,OAAK,WAGfF,EAAC,KAAMG,GAAE,SAAQ,SAAWC,GAG1B,GAAa,KAAXC,KAAOC,MAA6B,YAAzBD,KAAgBE,UAAyB,CAEpDH,EAAMI,iBAGN,IAAIF,EAAID,KAAQC,KAIhBN,EAAC,cAAeS,QAAO,CACrBC,UAAWV,EAAEM,GAAMK,SAASC,KAC3B,KAAI,WAGLC,OAAOC,SAASR,KAAOA,SAM7BN,EAAEa,QAAQE,QAAM,WACdD,SAASE,QAAO,eAKPC,GAET,IAmBMC,EACAC,EApBFC,EAAa,kBACbC,EAAQJ,EAAEK,uBAAuBF,GACjCG,EAAaF,EAAMG,OACnBC,EAAQ,EACRC,GAAS,WA+BJC,EAAeC,GAGtB,IAAIF,EAAQ,CAVZA,GAAS,EAETG,YAAU,WACRH,GAAS,IACR,KAYD,IAAII,EAAcF,EAAQ,EACtBG,EAAUH,EAAQ,EAClBI,EAAcJ,EAAQ,EACtBK,EAAUL,EAAQ,EAGjBL,EAAa,EAAK,IAIjBK,GAAS,EACXE,EAAeP,EAAa,EACnBK,GAAUL,EAAa,IAChCQ,EAAU,GAGRD,GAAe,EACjBE,EAAeT,EAAa,EACnBQ,GAAYR,EAAa,IAClCU,EAAU,GAIC,GAATL,GACFE,EAAeP,EAAa,EAC5BS,EAAeT,EAAa,EAC5BU,EAAWL,EAAQ,GACVA,GAAUL,EAAY,IAC/BO,EAAeF,EAAQ,EACvBG,EAAU,EACVE,EAAU,GAMZZ,EAAMW,GAAazB,UAAYa,EAC/BC,EAAMY,GAAS1B,UAAYa,EAG3BC,EAAMS,GAAavB,UAAYa,EAAa,QAC5CC,EAAMO,GAAOrB,UAAYa,EAAa,UACtCC,EAAMU,GAASxB,UAAYa,EAAa,mBAMrCc,IAGFR,IAGCD,GAAUF,EAAa,EACzBE,EAAQ,EAERA,IAIFE,EAAeF,aAKVU,IAGFT,IAGU,GAATD,EACFA,EAASF,EAAa,EAEtBE,IAIFE,EAAeF,IAhHjBJ,EAAME,EAAa,GAAGa,UAAUC,IAAG,QACnChB,EAAM,GAAGe,UAAUC,IAAG,UACtBhB,EAAM,GAAGe,UAAUC,IAAG,QAMlBnB,EAAOD,EAAEK,uBAAsB,0BAA2B,GAC1DH,EAAOF,EAAEK,uBAAsB,0BAA2B,GAE9DJ,EAAKoB,iBAAgB,QAAUJ,GAC/Bf,EAAKmB,iBAAgB,QAAUH,GA8G/BT,GAAS,GAMXzB","sources":["src/js/scripts.js"],"sourcesContent":["$(document).ready(function(){\r\n  // Add smooth scrolling to all links\r\n  \r\n  $(\"a\").on('click', function(event) {\r\n    \r\n    // Make sure this.hash has a value before overriding default behavior\r\n    if (this.hash !== \"\" && this.className == \"menuLink\") {\r\n      // Prevent default anchor click behavior\r\n      event.preventDefault();\r\n\r\n      // Store hash\r\n      var hash = this.hash;\r\n\r\n      // Using jQuery's animate() method to add smooth page scroll\r\n      // The optional number (800) specifies the number of milliseconds it takes to scroll to the specified area\r\n      $('html, body').animate({\r\n        scrollTop: $(hash).offset().top\r\n      }, 1000, function(){\r\n\r\n        // Add hash (#) to URL when done scrolling (default click behavior)\r\n        window.location.hash = hash;\r\n      });\r\n    };\r\n  });\r\n  \r\n  // Refresh on resize\r\n  $(window).resize(function(){\r\n    location.reload(false);\r\n  });\r\n  \r\n\r\n  // BEGIN Carousel Handler\r\n  !(function(d){\r\n    // Variables to target our base class,  get carousel items, count how many carousel items there are, set the slide to 0 (which is the number that tells us the frame we're on), and set motion to true which disables interactivity.\r\n    var itemClassName = \"carousel__photo\",\r\n        items = d.getElementsByClassName(itemClassName),\r\n        totalItems = items.length,\r\n        slide = 0,\r\n        moving = true;\r\n  \r\n    // To initialise the carousel we'll want to update the DOM with our own classes\r\n    function setInitialClasses() {\r\n  \r\n      // Target the last, initial, and next items and give them the relevant class.\r\n      // This assumes there are three or more items.\r\n      items[totalItems - 1].classList.add(\"prev\");\r\n      items[0].classList.add(\"active\");\r\n      items[1].classList.add(\"next\");\r\n    }\r\n  \r\n    // Set click events to navigation buttons\r\n  \r\n    function setEventListeners() {\r\n      var next = d.getElementsByClassName('carousel__button--next')[0],\r\n          prev = d.getElementsByClassName('carousel__button--prev')[0];\r\n  \r\n      next.addEventListener('click', moveNext);\r\n      prev.addEventListener('click', movePrev);\r\n    }\r\n  \r\n    // Disable interaction by setting 'moving' to true for the same duration as our transition (0.5s = 500ms)\r\n    function disableInteraction() {\r\n      moving = true;\r\n  \r\n      setTimeout(function(){\r\n        moving = false\r\n      }, 300);\r\n    }\r\n  \r\n    function moveCarouselTo(slide) {\r\n  \r\n      // Check if carousel is moving, if not, allow interaction\r\n      if(!moving) {\r\n  \r\n        // temporarily disable interactivity\r\n        disableInteraction();\r\n  \r\n        // Preemptively set variables for the current next and previous slide, as well as the potential next or previous slide.\r\n        var newPrevious = slide - 1,\r\n            newNext = slide + 1,\r\n            oldPrevious = slide - 2,\r\n            oldNext = slide + 2;\r\n  \r\n        // Test if carousel has more than three items\r\n        if ((totalItems - 1) > 3) {\r\n  \r\n          // Checks if the new potential slide is out of bounds and sets slide numbers\r\n\r\n          if (slide <= 0) {\r\n            newPrevious = (totalItems - 1);\r\n          } else if (slide >= (totalItems - 1)){\r\n            newNext = 0;\r\n          }\r\n\r\n          if (newPrevious <= 0) {\r\n            oldPrevious = (totalItems - 1);\r\n          } else if (newNext >= (totalItems - 1)){\r\n            oldNext = 0;\r\n          }\r\n  \r\n          // Check if current slide is at the beginning or end and sets slide numbers\r\n          if (slide == 0) {\r\n            newPrevious = (totalItems - 1);\r\n            oldPrevious = (totalItems - 2);\r\n            oldNext = (slide + 1);\r\n          } else if (slide == (totalItems -1)) {\r\n            newPrevious = (slide - 1);\r\n            newNext = 0;\r\n            oldNext = 1;\r\n          }\r\n  \r\n          // Now we've worked out where we are and where we're going, by adding and removing classes, we'll be triggering the carousel's transitions.\r\n  \r\n          // Based on the current slide, reset to default classes.\r\n          items[oldPrevious].className = itemClassName;\r\n          items[oldNext].className = itemClassName;\r\n  \r\n          // Add the new classes\r\n          items[newPrevious].className = itemClassName + \" prev\";\r\n          items[slide].className = itemClassName + \" active\";\r\n          items[newNext].className = itemClassName + \" next\";\r\n        }\r\n      }\r\n    }\r\n  \r\n    // Next navigation handler\r\n    function moveNext() {\r\n  \r\n      // Check if moving\r\n      if (!moving) {\r\n  \r\n        // If it's the last slide, reset to 0, else +1\r\n        if (slide == (totalItems - 1)) {\r\n          slide = 0;\r\n        } else {\r\n          slide++;\r\n        }\r\n  \r\n        // Move carousel to updated slide\r\n        moveCarouselTo(slide);\r\n      }\r\n    }\r\n  \r\n    // Previous navigation handler\r\n    function movePrev() {\r\n  \r\n      // Check if moving\r\n      if (!moving) {\r\n  \r\n        // If it's the first slide, set as the last slide, else -1\r\n        if (slide == 0) {\r\n          slide = (totalItems - 1);\r\n        } else {\r\n          slide--;\r\n        }\r\n  \r\n        // Move carousel to updated slide\r\n        moveCarouselTo(slide);\r\n      }\r\n    }\r\n  \r\n    // Initialise carousel\r\n    function initCarousel() {\r\n      setInitialClasses();\r\n      setEventListeners();\r\n  \r\n      // Set moving to false now that the carousel is ready\r\n      moving = false;\r\n    }\r\n  \r\n    // make it rain\r\n    initCarousel();\r\n  \r\n  }(document));\r\n  // END Carousel Handler\r\n\r\n  \r\n});"],"names":["$","document","ready","on","event","this","hash","className","preventDefault","animate","scrollTop","offset","top","window","location","resize","reload","d","next","prev","itemClassName","items","getElementsByClassName","totalItems","length","slide","moving","moveCarouselTo","slide1","setTimeout","newPrevious","newNext","oldPrevious","oldNext","moveNext","movePrev","classList","add","addEventListener"],"version":3,"file":"index.d7074c3f.js.map"}